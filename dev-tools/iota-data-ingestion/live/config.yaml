# IndexerExecutor config
#
# The local path where checkpoints are stored. For optimal performance,
# this should match the IOTA Node's ingestion path when running on the same host.
# Using the same path as the Node allows direct file access instead of HTTP requests,
# significantly improving sync speed.
path: "./test-checkpoints"
# IOTA Node Rest API URL
#
# The IOTA Node's REST API URL acts as a fallback mechanism for fetching checkpoints
# when they are not available in the local ingestion path. This provides redundancy
# and ensures data availability even when local files are not accessible.
#
# Note: This URL is optional when:
# 1. The ingestion path matches the IOTA Node's path on same host machine)
# 2. You don't need a fallback mechanism for data retrieval
# 3. Local filesystem access is sufficient for your use case
#
# Required when:
# 1. Running on a different host than the IOTA Node
# 2. Using a different path than the Node
# 3. HTTP access is preferred over local filesystem
remote-store-url: "http://localhost:9000/api/v1"

# Path to the progress store JSON file.
#
# The ingestion pipeline uses this file to persist its progress,
# ensuring state is preserved across restarts.
#
progress-store-path: "/iota/output/live_ingestion_progress.json"

metrics-port: 8083

# Workers Configs
#
tasks:
  # Task unique name
  #
  # This task is responsible for storing entire checkpoint blobs into an S3 compatible bucket
  # Useful for Indexer's ingestion pipeline as a fallback mechanism for checkpoint synchronization
  - name: "local-live-storage"
    # Number of workers will process the checkpoints in parallel
    concurrency: 1
    # Task type
    blob:
      # remote Object Store config for more info:
      # - https://docs.iota.org/operator/archives#set-up-archival-fallback
      #
      object-store-config:
        object-store: "S3"
        aws-endpoint: "http://localhost:4566"
        bucket: "checkpoints"
        aws-access-key-id: "test"
        aws-secret-access-key: "test"
        aws-allow-http: true
        object-store-connection-limit: 20
      # Checkpoint upload chunk size (in MB) that determines the upload strategy:
      #
      # If checkpoint size < checkpoint_chunk_size_mb:
      #   - Uploads checkpoint using single PUT operation
      #   - Optimal for smaller checkpoints
      #
      # If checkpoint size >= checkpoint_chunk_size_mb:
      #   - Divides checkpoint into chunks of this size
      #   - Uploads chunks as multipart
      #   - Storage service concatenates parts on completion
      #
      # Example with 50MB chunk size:
      #   200MB checkpoint:
      #   - Splits into 4 parts (50MB each)
      #   - Multipart upload of each part
      #   - Parts merged on remote storage
      #
      #   40MB checkpoint:
      #   - Single PUT upload
      #   - No chunking needed
      #
      # Minimum allowed chunk size is 5MB
      #
      checkpoint-chunk-size-mb: 100
      node-rest-api-url: "http://localhost:9000/api/v1"
