name: Rust tests

on:
  workflow_call:
    inputs:
      isRust:
        type: boolean
        default: false
      isPgIntegration:
        type: boolean
        default: false
      isMoveExampleUsedByOthers:
        type: boolean
        default: false
      runSimtest:
        type: boolean
        default: false
      testOnlyChangedCrates:
        type: boolean
        default: true
      changedCrates:
        type: string
        required: false
      changedExternalCrates:
        type: string
        required: false

concurrency:
  group: rust-tests-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/develop' }}

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: "error"
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RESTART_POSTGRES: false

jobs:
  rust-tests:
    name: Run rust tests
    if: |
      !cancelled() && (inputs.isRust || inputs.isPgIntegration || inputs.isMoveExampleUsedByOthers)
    timeout-minutes: 90
    runs-on: [self-hosted] # Run on either x64 or arm64
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    # we always start the postgres container, even if not all tests need it
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgrespw
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres_container
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Install postgresql-client
        run: sudo apt-get install -y postgresql-client
      - name: Setup db
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -c 'CREATE DATABASE iota_indexer;' -c 'ALTER SYSTEM SET max_connections = 500;'
      - run: docker restart --time 0 postgres_container
      - run: sleep 5
      - name: rust tests
        # test using filters, to only include changed crates and all their dependent crates
        # "CI_IS_EXTERNAL_CRATES" is set "isRust" because we also want to test the external crates when rust code changes.
        # "RESTART_POSTGRES" are set in the env variables above
        run: |
          export CI_IS_RUST=${{ inputs.isRust }}
          export CI_IS_EXTERNAL_CRATES=${{ inputs.inputs.isRust }}
          export CI_IS_PG_INTEGRATION=${{ inputs.isPgIntegration }}
          export CI_IS_MOVE_EXAMPLE_USED_BY_OTHERS=${{ inputs.isMoveExampleUsedByOthers }}
          export TEST_ONLY_CHANGED_CRATES=${{ inputs.testOnlyChangedCrates }}

          if [ -n "${{ inputs.changedCrates }}" ]; then
            export CI_CHANGED_CRATES="${{ inputs.changedCrates }}"
          else
            unset CI_CHANGED_CRATES
          fi

          if [ -n "${{ inputs.changedExternalCrates }}" ]; then
            export CI_CHANGED_EXTERNAL_CRATES=${{ inputs.changedExternalCrates }}
          else
            unset CI_CHANGED_EXTERNAL_CRATES
          fi

          ./scripts/ci_tests/rust_tests.sh run_tests

  rust-simtests:
    name: Run rust simtests
    if: |
      inputs.runSimtest && !cancelled() && (inputs.isRust || inputs.isPgIntegration || inputs.isMoveExampleUsedByOthers)
    timeout-minutes: 90
    runs-on: [self-hosted-x64]
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    # we always start the postgres container, even if not all tests need it
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgrespw
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres_container
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Install postgresql-client
        run: sudo apt-get install -y postgresql-client
      - name: Setup db
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -c 'CREATE DATABASE iota_indexer;' -c 'ALTER SYSTEM SET max_connections = 500;'
      - run: docker restart --time 0 postgres_container
      - run: sleep 5
      - name: rust tests
        # test using filters, to only include changed crates and all their dependent crates
        # "CI_IS_EXTERNAL_CRATES" is set "isRust" because we also want to test the external crates when rust code changes.
        # "RESTART_POSTGRES" are set in the env variables above
        run: |
          export CI_IS_RUST=${{ inputs.isRust }}
          export CI_IS_EXTERNAL_CRATES=${{ inputs.inputs.isRust }}
          export CI_IS_PG_INTEGRATION=${{ inputs.isPgIntegration }}
          export CI_IS_MOVE_EXAMPLE_USED_BY_OTHERS=${{ inputs.isMoveExampleUsedByOthers }}
          export TEST_ONLY_CHANGED_CRATES=${{ inputs.testOnlyChangedCrates }}

          if [ -n "${{ inputs.changedCrates }}" ]; then
            export CI_CHANGED_CRATES="${{ inputs.changedCrates }}"
          else
            unset CI_CHANGED_CRATES
          fi

          if [ -n "${{ inputs.changedExternalCrates }}" ]; then
            export CI_CHANGED_EXTERNAL_CRATES=${{ inputs.changedExternalCrates }}
          else
            unset CI_CHANGED_EXTERNAL_CRATES
          fi

          ./scripts/ci_tests/rust_tests.sh run_simtests
      - name: check new tests for flakiness
        run: |
          export CHANGED_CRATES="${{ inputs.changedCrates }}"
          ./scripts/ci_tests/rust_tests.sh stress_new_tests_check_for_flakiness

  check-unused-deps:
    name: Check Unused Dependencies (${{ matrix.flags }})
    if: |
      !cancelled() && !failure() && inputs.isRust && github.event.pull_request.draft == false
    strategy:
      matrix:
        flags: ["--all-features", "--no-default-features"]
      fail-fast: false
    runs-on: [self-hosted-x64]
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Run Cargo Udeps
        run: cargo +nightly ci-udeps ${{ matrix.flags }}
      - name: Run Cargo Udeps (external crates)
        run: cargo +nightly ci-udeps-external ${{ matrix.flags }}

  test-extra:
    env:
      # Tests written with #[sim_test] are often flaky if run as #[tokio::test] - this var
      # causes #[sim_test] to only run under the deterministic `simtest` job, and not the
      # non-deterministic `test` job.
      IOTA_SKIP_SIMTESTS: 1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - [self-hosted-x64]
      fail-fast: false
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: benchmark (smoke)
        run: |
          cargo run --package iota-benchmark --bin stress -- --log-path /tmp/stress.log --num-client-threads 10 --num-server-threads 24 --num-transfer-accounts 2 bench --target-qps 100 --num-workers 10  --transfer-object 50 --shared-counter 50 --run-duration 10s --stress-stat-collection
      - name: doctests
        run: |
          cargo test --doc
      - name: rustdoc
        run: |
          cargo doc --all-features --workspace --no-deps
      - name: Install nightly rustfmt
        run: rustup toolchain install nightly --component rustfmt --allow-downgrade
      - name: iota-execution
        run: |
          ./scripts/execution_layer.py generate-lib
      # Ensure there are no uncommitted changes in the repo after running tests
      - run: scripts/changed-files.sh
        shell: bash
