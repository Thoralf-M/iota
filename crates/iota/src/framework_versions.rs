// Copyright (c) Mysten Labs, Inc.
// Modifications Copyright (c) 2025 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use std::{collections::BTreeMap, sync::LazyLock};

use anyhow::{Context, bail};
use iota_protocol_config::ProtocolVersion;

/// Static mapping from protocol versions to the metadata for the framework.
/// Generated by [generate_framework_version_table] in build.rs.
static VERSION_TABLE: LazyLock<BTreeMap<ProtocolVersion, FrameworkVersion>> = LazyLock::new(|| {
    BTreeMap::from(include!(concat!(
        env!("OUT_DIR"),
        "/framework_version_table.rs"
    )))
});

#[derive(Debug)]
pub struct FrameworkVersion {
    pub git_revision: String,
    pub packages: Vec<FrameworkPackage>,
}

#[derive(Debug)]
pub struct FrameworkPackage {
    /// The name of the package, e.g. "Iota".
    pub package_name: String,

    /// The path to the package in the iota monorepo
    /// e.g. "crates/iota-framework/packages/iota-framework".
    pub repo_path: String,
}

impl PartialEq for FrameworkVersion {
    fn eq(&self, other: &Self) -> bool {
        self.git_revision == other.git_revision
    }
}

/// Return the framework snapshot for the latest known protocol version.
pub fn latest_framework() -> &'static FrameworkVersion {
    VERSION_TABLE
        .last_key_value()
        .expect("known framework version table should be nonempty")
        .1
}

/// Return the best commit hash for the given protocol version. Returns an error
/// if `version` is newer than the maximum protocol version or older than the
/// first known framework.
pub fn framework_for_protocol(
    version: ProtocolVersion,
) -> anyhow::Result<&'static FrameworkVersion> {
    if version > ProtocolVersion::MAX {
        bail!("Protocol version {version:?} is newer than the one this binary was built with.");
    }

    // There are gaps in the manifest when multiple protocol versions use the same
    // framework version. Therefore, we return the newest framework version that
    // is not newer than the requested protocol version. Note that it's possible
    // that there is no such version if the requested version is older than the
    // oldest framework; we return an error in this case.
    Ok(VERSION_TABLE
        .range(..=version)
        .next_back()
        .context(format!("Unrecognized protocol version {version:?}"))?
        .1)
}

#[test]
/// There is at least one known framework version.
fn test_nonempty_version_table() {
    assert!(!VERSION_TABLE.is_empty());
}

#[test]
/// The hash for a specific version that we have one for is correctly returned.
fn test_exact_version() {
    let framework = framework_for_protocol(4.into()).unwrap();
    assert_eq!(framework.git_revision, "49d5d7d99313");
    assert!(framework.packages.iter().any(|p| p.package_name == "Iota"));
}

#[test]
#[ignore = "this test is not applicable, as we do not have version gaps yet."]
/// We get the right hash for a version that we don't have an exact entry for.
/// TODO: enable once a gap version is created.
fn test_gap_version() {
    // If versions 4 is missing in the manifest; version 3 should be returned.
    assert_eq!(
        framework_for_protocol(4.into()).unwrap(),
        framework_for_protocol(3.into()).unwrap(),
    );
    // Version 5 is present though!
    assert_ne!(
        framework_for_protocol(5.into()).unwrap(),
        framework_for_protocol(3.into()).unwrap(),
    );
}

#[test]
/// We get the correct hash for the latest known protocol version.
fn test_version_latest() {
    assert_eq!(
        framework_for_protocol(ProtocolVersion::MAX).unwrap(),
        latest_framework()
    );
}

#[test]
/// We get an error if the protocol version is too small or too large.
fn test_version_errors() {
    assert!(framework_for_protocol(0.into()).is_err());
    assert!(framework_for_protocol(ProtocolVersion::MAX + 1).is_err());
}
